<?php echo $this->getChildHtml('add_button');?>
<div id="<?php echo $this->getFormName();?>_items_top"></div>


<?php $form = $this->getForm();?>
<script type="text/javascript">
    //<![CDATA[
    var repeaterTemplate = '<div id="<?php echo $this->getFormName();?>_{{id}}" class="<?php echo $this->getFormName();?>_form <?php echo $this->getFormName();?>_{{id}}">'+
        '<input type="hidden" id="<?php echo $this->getFormName() ?>_{{id}}_is_delete" name="<?php echo $this->getFormId();?>[is_delete]" value="" />'+
        <?php foreach ($form->getElements() as $element) {
            $lines = explode("\n", $element->toHtml());
            foreach ($lines as $line) {
            echo "'".$line."'+\n";
            }
        }?>
        '<span class="a-right"><?php echo $this->jsQuoteEscape($this->getDeleteButtonHtml()) ?></span>'+
        '</div>';


    var productOption = {
        div : $('filters_items_top'),
        templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
        templateText : repeaterTemplate,
        itemCount : 1,
        add : function(data) {

            console.log(data);

            this.template = new Template(this.templateText, this.templateSyntax);

            if(!data.id){
                data = {};
                data.id  = this.itemCount;
                data.field_id = this.itemCount;
                <?php foreach ($form->getElements() as $element) {
                    echo "data." . $element->getId() . " = '';\n";
                }?>

            } else {
//            this.itemCount = data.item_count;
            }

            Element.insert(this.div, {'after':this.template.evaluate(data)});

            <?php foreach ($form->getElements() as $element) {
                echo "this.addDataToForm('".$element->getType()."',data.".$element->getId().", data.id, '".$element->getId()."');";
            } ?>




                //set selected type
    //            if (data.table_name) {
    //                $A($('<?php //echo $this->getFieldId() ?>//_'+data.id+'_table_name').options).each(function(option){
//                    if (option.value==data.table_name) option.selected = true;
//                });
//            }

        this.itemCount++;
        this.bindRemoveButtons();
//            productOptionType.bindSelectInputType();
    },
    addDataToForm: function(type, value, id, name){
        switch(type){
            case 'select':
                    $A($('<?php echo $this->getFormName() ?>_'+id+'_'+name).options).each(function(option){
                        if (option.value==value) option.selected = true;
                    });
                break;
            default:
                break;
        }
    },
    remove: function(event){
        var element = $(Event.findElement(event, 'div'));
        console.log(element);
        if(element){
            $(element.readAttribute('id')+'_'+'is_delete').value = '1';
            element.addClassName('no-display');
            element.addClassName('ignore-validate');
            element.hide();
        }
    },
    bindRemoveButtons : function(){
        var buttons = $$('div.<?php echo $this->getFormName();?>_form .delete-<?php echo $this->getFormName();?>');
        for(var i=0;i<buttons.length;i++){
            if(!$(buttons[i]).binded){
                $(buttons[i]).binded = true;
                Event.observe(buttons[i], 'click', this.remove.bind(this));
            }
        }
//            var inputs = $$('div.product-custom-options button', 'div.product-custom-options input', 'div.product-custom-options select', 'div.product-custom-options textarea');
<?php //if ($this->isReadonly()):?>
//            for (var i=0, l = inputs.length; i < l; i ++) {
//                inputs[i].disabled = true;
//                if (inputs[i].tagName.toLowerCase()=='button') {
//                    inputs[i].addClassName('disabled');
//                }
//            }
<?php //else: ?>
//            inputs.each(function(el) { Event.observe(el, 'change', el.setHasChanges.bind(el));  } )
<?php //endif;?>
        }
    }



//    if($('option_panel')){
//        $('option_panel').remove();
//    }

//    productOption.bindRemoveButtons();

    if($('<?php echo $this->getChild('add_button')->getId() ?>')){
        Event.observe('<?php echo $this->getChild('add_button')->getId() ?>', 'click', productOption.add.bind(productOption));
    }

    //validation for selected input type
//    Validation.addAllThese([
//        ['required-option-select', <?php //echo $this->helper('core')->jsonEncode(Mage::helper('catalog')->__('Select type of option')) ?>//, function(v, elm) {
//            if (elm.getValue() == '') {
//                return false;
//            }
//            return true;
//        }]]);

    //adding data to templates
<?php foreach ($this->getFormValue() as $_value): ?>
    productOption.add(<?php echo json_encode($_value) ?>);
<?php endforeach; ?>

    //bind scope checkboxes
    //productOptionScope.bindScopeCheckbox();

//]]>
</script>


